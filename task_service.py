# File: services/task_service.py
from typing import Dict, Optional
from constants import TaskType

class TaskService:
    @staticmethod
    def get_helper_text(task_type: TaskType) -> str:
        helpers = {
            TaskType.CODE_GENERATION: """
            üéØ <b>Best Practices:</b><br>
            ‚Ä¢ Describe the desired functionality clearly<br>
            ‚Ä¢ Specify any required libraries<br>
            ‚Ä¢ Mention performance requirements<br>
            ‚Ä¢ Include example inputs/outputs<br>
            ‚Ä¢ State error handling needs
            """,
            TaskType.CODE_REVIEW: """
            üîç <b>Review Guidelines:</b><br>
            ‚Ä¢ Paste the complete code<br>
            ‚Ä¢ Highlight specific concerns<br>
            ‚Ä¢ Mention performance requirements<br>
            ‚Ä¢ Request specific aspects to review<br>
            ‚Ä¢ Include context and constraints
            """,
            TaskType.DOCUMENTATION: """
            üìù <b>Documentation Tips:</b><br>
            ‚Ä¢ Provide complete code to document<br>
            ‚Ä¢ Specify documentation style<br>
            ‚Ä¢ Mention target audience<br>
            ‚Ä¢ Request specific examples<br>
            ‚Ä¢ Include usage scenarios
            """,
            TaskType.TESTING: """
            üß™ <b>Testing Requirements:</b><br>
            ‚Ä¢ Include the code to test<br>
            ‚Ä¢ Specify test framework preference<br>
            ‚Ä¢ Mention required test coverage<br>
            ‚Ä¢ List critical test cases<br>
            ‚Ä¢ Describe edge cases
            """,
            TaskType.QUERY: """
            üí° <b>Query Guidelines:</b><br>
            ‚Ä¢ Ask specific questions<br>
            ‚Ä¢ Provide context<br>
            ‚Ä¢ Mention related technologies<br>
            ‚Ä¢ Request examples if needed<br>
            ‚Ä¢ Specify depth of explanation
            """
        }
        return helpers.get(task_type, "")

    @staticmethod
    def get_placeholder(task_type: TaskType) -> str:
        placeholders = {
            TaskType.CODE_GENERATION: "Example: Create a Python function that processes CSV files, handles errors, and includes type hints...",
            TaskType.CODE_REVIEW: "Paste your code here for review. Include any specific areas of concern...",
            TaskType.DOCUMENTATION: "Paste the code you need documentation for. Specify any particular documentation style...",
            TaskType.TESTING: "Paste the code you need tests for. Mention any specific test cases or scenarios...",
            TaskType.QUERY: "Ask your question about code, best practices, or implementation details..."
        }
        return placeholders.get(task_type, "Describe your task here...")

    @staticmethod
    def get_instructions(task_type: TaskType) -> str:
        instructions = {
            TaskType.CODE_GENERATION: """
            Request code generation with:
            - Detailed requirements
            - Expected functionality
            - Any specific constraints
            """,
            TaskType.CODE_REVIEW: """
            Submit code for review to get:
            - Code quality assessment
            - Bug detection
            - Performance analysis
            - Security review
            """,
            TaskType.DOCUMENTATION: """
            Request documentation for:
            - Function/class documentation
            - Usage examples
            - Parameter descriptions
            """,
            TaskType.TESTING: """
            Generate tests with:
            - Test cases
            - Edge cases
            - Error scenarios
            """,
            TaskType.QUERY: """
            Query the knowledge base for:
            - Code explanations
            - Best practices
            - Implementation guidance
            """
        }
        return instructions.get(task_type, "")
